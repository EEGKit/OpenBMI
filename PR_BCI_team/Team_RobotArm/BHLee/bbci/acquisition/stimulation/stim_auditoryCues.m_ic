IN CONSTRUCTIONfunction stim= stim_auditoryCues(stim, varargin)%STIM_AUDITORYCUES - Presentation of Auditory Cues%%Synopsis:% stim_auditoryCues(STIM, <OPT>)%%Arguments:% STIM: array of structs. Each component STIM(k) defines the stimuli for%   class k:%    .soundfile: cell array of sound file names (WAV format 16 Bit,%     stereo required)% OPT: struct or property/value list of optional arguments:% 'test': if true (1), the initial countdown is skipped and the%    EEG recording is not save.% blanker@cs.tu-berlin.de, Aug-2007global VP_CODEif ~isstruct(stim),  error('first argument STIM must be a struct');endif ~isfield(stim, 'cue'),  error('first argument STIM must have a field ''cue''.');endopt= propertylist2struct(varargin{:});opt= set_defaults(opt, ...                  'filename', '', ...                  'test', 0, ...                  'position', 0, ...                  'bv_host', 'localhost', ...                  'background',[1 1 1], ...                  'countdown', 7, ...                  'countdown_fontsize', 0.3, ...                  'cross_vpos', 0.57, ...                  'cross_size', 0.05, ...                  'cross_spec', {'Color',0.7*[1 1 1], 'LineWidth',4}, ...                  'cue_vpos', 0.54, ...                  'cue_spec', {'FontSize',0.2, 'Color',[0 0 0]}, ...                  'duration_intro', 7000, ...                  'msg_vpos', 0.54, ...                  'msg_spec', {'FontSize',0.1, 'FontWeight','bold', ...                               'Color',0.3*[1 1 1]}, ...                  'breaks',inf, ...                  'break_minevents',7, ...                  'break_markers', [249 250], ...                  'break_msg', 'Short break for %d s', ...                  'break_countdown', 7, ...                  'msg_fin','fin');if length(opt.breaks)==1,  opt.breaks= [opt.breaks 10];endif ~isempty(opt.bv_host),  bvr_checkparport;endstimutil_figureMaximize(opt.position);set(gcf, 'Color',opt.background);[opt.handle_msg, opt.handle_background]= ...    stimutil_initMsg(opt);if ~opt.test,  if ~isempty(opt.filename),    bvr_startrecording([opt.filename 'VP' VP_CODE]);  end  stimutil_showDescription(stim.desc, opt);endfix_w= opt.cross_size;fix_h= fix_w/fp(4)*fp(3);opt.handle_cross= line(0.5 + [-fix_w fix_w; 0 0]', ...                       opt.fixation_vpos + [0 0; -fix_h fix_h]', ...                       opt.fixation_spec{:}, 'Visible','off');cue_spec= {'HorizontalAli','center', ...           'VerticalAli','middle', ...           'FontUnits','normalized', ...           'Visible','off', ...            opt.cue_spec{:}};opt.handle_cue= text(0.5, opt.cue_vpos, ' ', cue_spec{:});moveObjectBack(opt.handle_cue);ppTrigger(251);if isfield(stim, 'prelude'),  show_cue_sequence(stim.prelude, opt, 'add_to_marker',10);  pause(1);endshow_cue_sequence(stim, opt);ppTrigger(254);set(opt.handle_msg, 'String',opt.msg_fin, 'Visible','on');pause(1);if ~opt.test & ~isempty(opt.filename),  bvr_sendcommand('stoprecording');endreturn;function show_cue_sequence(stim, varargin)stim= set_defaults(stim, ...                   'msg_intro', 'Be prepared');opt= propertylist2struct(varargin{:});opt= set_defaults(opt, ...                  'add_to_marker', 0);nClasses= length(stim.cue);nEvents= sum([stim.cue(:).nEvents]);cue_sequence= [];for cc= 1:nClasses,  if size(stim.cue(cc),1)==1,    stim.cue(cc).timing(2,:)= zeros(size(stim.cue(cc).timing));  end  cue_sequence= cat(1, cue_sequence, cc*ones(stim.cue(cc).nEvents,1));endcue_sequence= cue_sequence(randperm(nEvents));set(opt.handle_msg, 'String',stim.msg_intro, 'Visible','on');pause(opt.duration_intro/1000);set(opt.handle_msg, 'Visible','off');if ~opt.test,  pause(1);  stimutil_countdown(opt.countdown, opt);  ppTrigger(252);  pause(1);endwaitForSync;for ei= 1:nEvents,  cc= cue_sequence(ei);  tim= stim.cue(cc).timing(1,:) + rand(1,3).*stim.cue(cc).timing(2,:);    set(opt.handle_cross, 'Visible','on');  if tim(1)>0,    ppTrigger(101);    drawnow;    waitForSync(tim(1));  end    set(opt.handle_cue, 'String', stim.cue(cc).string, 'Visible','on');  ppTrigger(cue_sequence(ei) + opt.add_to_marker);  drawnow;  waitForSync(tim(2));    if tim(3)>0,    set([opt.handle_cross; opt.handle_cue], 'Visible','off');    ppTrigger(100);    drawnow;    waitForSync(tim(3));  end    if mod(ei, opt.breaks(1))==0 & ei<nEvents-opt.break_minevents,    set([opt.handle_cross; opt.handle_cue], 'Visible','off');    stimutil_break(opt, 'break_duration',opt.breaks(1));  endendppTrigger(253);pause(1);