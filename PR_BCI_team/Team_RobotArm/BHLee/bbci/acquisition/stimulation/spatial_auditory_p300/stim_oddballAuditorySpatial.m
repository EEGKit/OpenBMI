function opt = stim_oddballAuditorySpatial(varargin);%% Synopsis: Stimulus presentation for Auditory Oddball with spatial %    location cues using multichannel audio output. It plays a single%    stimulus and takes care of the triggers.%% use:%    opt = stim_oddballAuditorySpatial(opt);%% INPUT%    OPT%     .cueDir          The location of the cue that is to be played. In%                      general, when using the multi-channel M-Audio card,%                      this could be [1:8].%     .targetDir       The current target direction. If this matches the%                      cueDir, the trigger that is send is summed with 10%                      to indicate target direction. Usefull for%                      copy/training mode.%     .speakerCount    The total number of speakers for which the soundcard%                      is initialized.%     .pahandle        The handle to the soundcard opened with%                      PsychPortAudio%     .speakerSelected Array that sets the indices for which of the%                      initialized speakers are actually used.%     .cueStream       Array that contains the actual sound data. There are%                      two options: if ndims = 3 [speakercount x soundlength x channel]%                      then stereo sounds are assumed. if ndims = 2, mono%                      sounds are assumed (disregarding channel dimension).%     .isi             Scalar. Sets the inter-stimulus interval between 2%                      consecutive stimuli%     .isi_jitter      Scalar. Sets the jitter in the isi.%     .singleSpeaker   Boolean. If true, all stimuli will be presented%                      through a single speaker. Generally functions as a%                      control condition. Will not work for stereo sounds.%                      [default=0].%     .calibrated      Array. [speakerSelected x speakerSelected] with the%                      gain factors for each speaker on the diagonal. Can%                      be used to ecqualize the loudness of the speakers to%                      match its properties.%     .targetMarkerOffset    this optional offset is added to the target %                      stimulus markers%     .cueMarkerOffset this optional offset is added to the non-target%                      stimulus markers%    %% OUTPUT%    opt               Returns the opt struct with some added fields. For%                      instance, the mono-sounds in cueStream are%                      transformed into a list of arrays with the proper%                      dimensions for direct playback with the set amount%                      of speakers. This transformation has to be done only%                      once if the adapted opt struct is passed the next%                      time.%% NOTE% opt.pahandle can be obtained with the following functions (if the% PsychToolbox is installed):%% InitializePsychSound(1);% pahandle = PsychPortAudio('Open' [, deviceid][, mode][,reqlatencyclass][, freq][, channels][, buffersize][, suggestedLatency][, selectchannels]);%% NOTE 2% The soundcard has been initialized for a specific sampling rate% (default=44100). The sounds in cueStream should be in this sampling rate.%% Martijn Schreuder, 11/08/2009global BCI_DIR SOUND_DIR VP_CODE TODAY_DIRopt= propertylist2struct(varargin{:});opt= set_defaults(opt, ...    'targetDir', [], ...    'cueDir', [], ...    'speakerCount', 8, ...    'speakerSelected', [], ...    'isi', 175,...    'isi_jitter', 0, ...    'singleSpeaker', 0,...    'markerOffset',10, ...    'sendTrigger', 1);if ~isfield(opt, 'cueStream'),    error('opt must have field ''cueStream''.');endif opt.singleSpeaker && ndims(opt.cueStream) == 3,    error('Single speaker mode not compatible with stereo sounds.');end%% Create a structure with the different cues, ea locations, stored in it.if ~isfield(opt, 'cueList'),    if ndims(opt.cueStream) == 2,            for ii = 1:opt.speakerCount,            opt.cueList(ii).wav = zeros(opt.speakerCount, length(opt.cueStream));            if ~opt.singleSpeaker,                if size(opt.cueStream, 1) == 1,                    opt.cueList(ii).wav(ii,:) = opt.cueStream;                else                    if ismember(ii, opt.speakerSelected),                       opt.cueList(ii).wav(ii,:) = opt.cueStream(ii,:);                    end                end            else                if size(opt.cueStream, 1) == 1,                    opt.cueList(ii).wav(1,:) = opt.cueStream;                else                    if ismember(ii, opt.speakerSelected),                       opt.cueList(ii).wav(1,:) = opt.cueStream(find(opt.speakerSelected == ii),:);                    end                end            end            % use calibrated speaker gain            opt.cueList(ii).wav = opt.calibrated * opt.cueList(ii).wav;        end    elseif ndims(opt.cueStream) == 3, % Stereo        for ii = 1:length(opt.speakerSelected),            speaker = opt.speakerSelected(ii);            opt.cueList(speaker).wav = squeeze(opt.cueStream(speaker, :, :))';        end    endendwaitForSync(opt.isi + rand()*opt.isi_jitter);%% play the sound and send ppTriggerPsychPortAudio('FillBuffer', opt.pahandle, opt.cueList(opt.cueDir).wav);if opt.sendTrigger,  if ~isempty(opt.targetDir) && opt.targetDir == opt.cueDir,      ppTrigger(opt.cueDir+opt.targetMarkerOffset);  else      ppTrigger(opt.cueDir+opt.cueMarkerOffset);  end        endPsychPortAudio('Start', opt.pahandle);% trial_duration = opt.isi + rand()*opt.isi_jitter; PsychPortAudio('Stop', opt.pahandle, 1);end