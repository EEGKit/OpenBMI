function [H, hex]= feedback_hexa_init(fig, opt)

opt= set_defaults(opt, ...
    'hexradius',0.29, ...
    'labelset', ...
    ['ABCDE'; 'FGHIJ'; 'KLMNO'; 'PQRST'; 'UVWXY'; 'Z_<.?'],...
    'rate_control', 1, ...
    'speed', 2, ...
    'anglereset_factor', 0.5, ...
    'initangle_offset', pi/24, ...
    'duration_blocking', 500, ...
    'duration_show_selected', 40, ...
    'duration_show_final', 500, ...
    'duration_move_selected', 500, ...
    'duration_before_free', 600, ...
    'countdown', 3000, ...
    'arrow_reset', 'bestletter', ...
    'degree_per_sec', 360/6, ...
    'grow_per_sec', 1, ...
    'decay_per_sec', 1, ...
    'threshold_turn', -0.333, ...
    'threshold_move', 0.333, ...
    'threshold_preselect', 0, ...
    'label_radfactor', 0.65, ...
    'label_spec', ...
    {'FontSize',0.06, 'FontWeight','bold'}, ...
    'biglabel_spec', ...
    {'Color','k','FontSize', 0.12}, ...
    'biglabel_select_spec', ...
    {'Color',[0 0.5625 0], 'FontSize',0.2}, ...
    'msg_spec', {'FontSize',0.2}, ...
    'text_spec', {'FontSize',0.05, 'FontWeight','bold'}, ...
    'textfield_width', 1.1, ...
    'textfield_to_hex_gap', 0.03, ...
    'textfield_to_top_gap', 0.01, ...
    'textfield_box_spec', {'Color',[0 0.5625 0], 'LineWidth',3}, ...
    'hex_spec', {'Color','k', 'LineWidth',2}, ...
    'hex_preselect_spec', {'LineWidth',4}, ...
    'hex_select_spec', {'LineWidth',6}, ...
    'language_model', 'german', ...
    'lm_headfactor', [0.85 0.85 0.75 0.5 0.25], ...
    'lm_letterfactor', 0.01, ...
    'lm_npred', 2, ...
    'lm_probdelete', 0.1, ...
    'arcsteps', 10, ...
    'arrow_width', 0.075, ...
    'arrow_backlength', 0.1, ...
    'arrow_minlength', 0.20, ...
    'arrow_headlength', 0.15, ...
    'arrow_headwidth', 0.175, ...
    'arrow_spec', ...
    {'FaceColor',[0.3 0.5 0.3], 'EdgeColor','none'},...
    'arrow_grow_spec', ...
    {'FaceColor',[0 0.7 0]}, ...
    'arrow_select_spec', ...
    {}, ...
    'background', 0.9*[1 1 1], ...
    'fs', 25, ...
    'text_reset', 0, ...
    'time_after_text_reset', 3000, ...
    'show_cake', 0, ...
    'show_control', 0, ...
    'control_x', [1.1 1.2], ...
    'control_h', 0.75, ...
    'control_meter_spec', {'FaceColor',[1 0.6 0]}, ...
    'log', 1, ...
    'parPort', 1, ...
    'status', 'pause', ...
    'changed', 1, ...
    'cebit_layout', 1, ...
    'position', get(fig,'position'));

%% most of those things do not really help
fast_fig= {'Clipping','off', 'HitTest','off', 'Interruptible','off'};
fast_axis= {'Clipping','off', 'HitTest','off', 'Interruptible','off', ...
            'DrawMode','fast'};
fast_obj= {'EraseMode','xor', 'HitTest','off', 'Interruptible','off'};
fast_text= {'HitTest','off', 'Interruptible','off', 'Clipping','off', ...
            'Interpreter','none'};

if opt.cebit_layout,
%  opt.position(3:4)= [1280 753];
  opt.background= [1 1 1];
  opt.textfield_width= 1.02;
end

clf;
set(fig, 'Menubar','none', 'Interruptible','off', ...
	 'Renderer','painters', 'DoubleBuffer','on', ...
	 'Position',opt.position, ...
	 'Color',opt.background, ...
	 'Pointer','custom', 'PointerShapeCData',ones(16)*NaN, fast_fig{:});
set(gca, 'Position',[0 0 1 1], ...
         'XLim',[-1 1], 'YLim',[-1 1], fast_axis{:});
axis equal off;
XLim= get(gca, 'XLim');
set(gca, 'XLim', [-1 1]*diff(XLim)/2);
drawnow;

o.bottom_margin= 0.01;

hexheight= opt.hexradius/2/tan(2*pi/12);
hex.ursprung= [0; -1 + 3*hexheight + o.bottom_margin];
hexangles= 0:pi/3:2*pi;
for ai= 1:6,
  angie= hexangles(ai)+pi/6;
  cx(ai)= opt.hexradius*sin(angie);
  cy(ai)= opt.hexradius*cos(angie);
  angie= hexangles(ai);
  dx= 2*hexheight*sin(angie);
  dy= 2*hexheight*cos(angie);
  H.biglabel(ai)= text(hex.ursprung(1)+dx, hex.ursprung(2)+dy, ' ');
  H.hex(ai)= fb_hexawrite_drawHex(hex.ursprung+[dx;dy], angie-pi+2*pi/12, ...
				   opt, 'label',opt.labelset(ai,:));
  set([H.hex.label], fast_text{:});
end
set(H.biglabel, 'HorizontalAli', 'center', 'VerticalAli','middle', ...
                'FontUnits','normalized', ...
		opt.label_spec{:}, opt.biglabel_spec{:}, fast_text{:});

cx= cx + hex.ursprung(1);
cy= cy + hex.ursprung(2);
H.cake= line(cx([1 4; 2 5; 3 6]'), cy([1 4; 2 5; 3 6]'), opt.hex_spec{:});
if ~opt.show_cake,
  set(H.cake, 'Visible','off');
end

H.control_meter= patch(opt.control_x([1 2 2 1]), ...
                       -opt.control_h*[1 1 1 1], 'r');
set(H.control_meter, 'EdgeColor','none', fast_obj{3:end}, ...
                  opt.control_meter_spec{:});
framedist= 0.01*[-1 1];
xx= opt.control_x + framedist;
yy= [-1 1]*opt.control_h + framedist;
H.control_outline= line(xx([1 2 2 1; 2 2 1 1]'), ...
                        yy([1 1 2 2; 1 2 2 1]'));
yy= -opt.control_h + (opt.threshold_turn+1)*opt.control_h + framedist;
H.control_threshold_turn= line(xx, yy([1 1]));
yy= -opt.control_h + (opt.threshold_move+1)*opt.control_h +framedist;
H.control_threshold_move= line(xx, yy([1 1]));
set([H.control_threshold_turn H.control_threshold_move], ...
    'Color','k', 'LineWidth',2, fast_obj{3:end});
set([H.control_outline], 'Color','k', 'LineWidth',2, fast_obj{3:end});
if ~opt.show_control,
  set([H.control_meter H.control_threshold_turn H.control_threshold_move ...
       H.control_outline'], 'Visible','off');
end
  
H.control_meter = nan*ones(size(H.control_meter));
H.control_threshold_turn = nan*ones(size(H.control_threshold_turn));
H.control_threshold_move = nan*ones(size(H.control_threshold_move));
H.control_outline = nan*ones(size(H.control_outline));
H.msg= text(hex.ursprung(1), hex.ursprung(2), ' ');
set(H.msg, 'HorizontalAli','center', 'VerticalAli','middle', ...
		 'FontUnits','normalized', ...
		 opt.msg_spec{:}, fast_text{:});

arrow= fb_hexawrite_arrow(-pi/12, 0, opt);
H.arrow= patch(hex.ursprung(1)+arrow(1,:), hex.ursprung(2)+arrow(2,:), 'k');
set(H.arrow, opt.arrow_spec{:});
set([H.arrow], fast_obj{3:end});
set([H.hex.label, H.hex.outline], fast_obj{3:end});

textfield_height= 2 - 6*hexheight - o.bottom_margin - ...
    opt.textfield_to_hex_gap - opt.textfield_to_top_gap;
textfield_width= 6*hexheight * opt.textfield_width;
textfield_rect= [-textfield_width/2 ...
                 1-opt.textfield_to_top_gap-textfield_height ...
                 textfield_width/2 ...
                 1-opt.textfield_to_top_gap];

H.textfield_box= line(textfield_rect([1 3 3 1; 3 3 1 1]), ...
                      textfield_rect([2 2 4 4; 2 4 4 2]));
set(H.textfield_box, opt.textfield_box_spec{:});

ht= text(0, 0, {'MMM','MMM','MMM'});
set(ht, 'FontName','Courier New', 'FontUnits','normalized', opt.text_spec{:});
rect= get(ht, 'Extent');
char_width= rect(3)/3;
char_height= rect(4)/3;
delete(ht);
hex.textfield_nLines= floor(textfield_height/char_height);
hex.textfield_nChars= floor(textfield_width/char_width);
H.textfield= text(0, mean(textfield_rect([2 4])), {' '});
set(H.textfield, 'HorizontalAli','center', 'VerticalAli','middle', ...
                 'FontName','Courier New', ...
                 'FontUnits','normalized', ...
                 opt.text_spec{:}, fast_text{:});

if opt.cebit_layout,
  global DATA_DIR
  sub_dir= [DATA_DIR 'images/'];
  im1= imread([sub_dir 'cebit_hexawrite_logos1.png']);
  sz1= size(im1);
  fsz= get(fig, 'Position');
  H.logo_ax(1)= axes('Position', [0 0 1 1]);
  set(H.logo_ax, 'Units','pixel');
  set(H.logo_ax(1), 'Position',[fsz(3)-sz1(2) fsz(4)-sz1(1) sz1(2) sz1(1)]);
  axes(H.logo_ax(1));
  H.logo(1)= imagesc(im1);
  if opt.cebit_layout==2,
    im2= imread([sub_dir 'cebit_hexawrite_logos2.png']);
    sz2= size(im2);
    H.logo_ax(2)= axes('Position', [0 0 1 1]);
    set(H.logo_ax(2), 'Position',[fsz(3)-sz2(2) 0 sz2(2) sz2(1)]);
    axes(H.logo_ax(2));
    H.logo(2)= imagesc(im2);
  end
  set(H.logo_ax, 'Visible','off', fast_axis{:});
end
