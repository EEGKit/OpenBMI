function [H, cfd]= feedback_smr_bar_init(fig, opt);

%% most of those things do not really help
fast_fig= {'Clipping','off', 'HitTest','off', 'Interruptible','off'};
fast_axis= {'Clipping','off', 'HitTest','off', 'Interruptible','off', ...
            'DrawMode','fast'};
fast_obj= {'EraseMode','xor', 'HitTest','off', 'Interruptible','off'};

figure(fig);
clf;
set(fig, 'Menubar','none', ...
         'Renderer','painters', ...
         'DoubleBuffer','on', ...
         'Color',[0 0 0], ...
         'Pointer','custom', ...
         'PointerShapeCData',ones(16)*NaN, ...
         fast_fig{:});
set(fig, 'Position',opt.position);

w0= 2*opt.target_width;
w= w0/(1-w0);
cfd.target_width= w;
H.ax= axes('position',[0 0 1 1]+opt.gap_to_border*[1 1 -2 -2]);
set(H.ax, 'XLim',[-1-w 1+w], 'YLim',[-1-w 1+w]);
axis('square');
set(H.ax, 'XTick',[], ...
          'YTick',[], ...
          'Color',opt.background, ...
          fast_axis{:});

H.punchline= line([-1 1], [-1 -1], ...
                  'Color',[0 0 0], ...
                  'LineWidth', 2, ...
                  opt.punchline_spec{:});
H.bar= patch([-1 1 1 -1]*opt.bar_width, ...
             [-1 -1 -1 -1], opt.color_bar);
H.tri= patch([-1 0 1 ]*opt.bar_width, ...
             [-1 -1 -1], opt.color_tri);

set([H.bar H.tri], 'EdgeColor','none', fast_obj{3:end});

t= 1 + cfd.target_width;
H.frame= patch([1 1 -1 -1 t t -t -t t t], ...
               [1 -1 -1 1 1 t t -t -t 1], opt.frame_color);
set(H.frame, 'EdgeColor','none');
